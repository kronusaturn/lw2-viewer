(uiop:define-package #:lw2.resources
  (:use #:cl #:iterate #:lw2-viewer.config #:lw2.utils #:lw2.sites #:lw2.context)
  (:import-from #:alexandria #:with-gensyms #:when-let #:appendf)
  (:export #:*page-resources* #:with-page-resources #:require-resource #:generate-versioned-link #:with-resource-bindings #:call-with-fonts-source-resources #:site-resources)
  (:recycle #:lw2-viewer)
  (:unintern #:fonts-source-resources))

(in-package #:lw2.resources)

(defparameter *page-resources* nil)
(defparameter *link-header* (constantly nil))
(defparameter *style-tags* (constantly nil))
(defparameter *script-tags* (constantly nil))
(defparameter *async-script-tags* (constantly nil))

(defparameter *push-option* nil)

(defmacro with-page-resources (&body body)
  `(let* ((*link-header* *link-header*)
	  (*style-tags* *style-tags*)
	  (*script-tags* *script-tags*)
	  (*async-script-tags* *async-script-tags*)
	  (*push-option* (when (hunchentoot:cookie-in "push") "nopush"))
	  (*page-resources* (site-resources *current-site*)))
     (dynamic-flet ((fn () ,@body))
       (call-with-site-resources *current-site* #'fn))))

(defmacro with-appended-functions ((&rest clauses) &body body)
  `(let* ,(iter (for (old-function new-name lambda-list . inner-body) in clauses)
		(let ((old-function-name (gensym)))
		  (collect `(,old-function-name ,old-function))
		  (collect `(,new-name (lambda ,lambda-list (funcall ,old-function-name ,@lambda-list) ,@inner-body)))))
     ,@body))

(defun require-resource (type &rest args)
  (push (list* type args) *page-resources*))

(defun generate-versioned-link (file)
  (let* ((filename (format nil "www~A" file)))
    (format nil "~A?v=~A" file (universal-time-to-unix (file-write-date filename)))))

(defgeneric call-with-fonts-source-resources (site fn))

(defun output-link-header-element (stream uri type)
  (multiple-value-bind (rel type as push-option)
      (case type
	(:preconnect (values "preconnect"))
	(:stylesheet (values "preload" "text/css" "style" *push-option*))
	(:script (values "preload" "text/javascript" "script" *push-option*)))
    (format stream "<~A>;rel=~A~@[;type=~A~]~@[;as=~A~]~@[;~A~]" uri rel type as push-option)))

(defun output-style-tag (stream uri media class)
  (format stream "<link rel=\"stylesheet\" href=\"~A\"~@[ media=\"~A\"~]~@[ class=\"~A\"~]>" uri media class))

(defun output-script-tag (stream uri &key async)
  (format stream "<script src=\"~A\"~:[~; async~]></script>" uri async))

(eval-when (:compile-toplevel :load-toplevel :execute)
  (defun preconnect-resource-forms (stream uri)
    (alist :link-header `((funcall delimit) (output-link-header-element ,stream ,uri :preconnect))))

  (defun style-resource-forms (stream uri &optional media class)
    (with-gensyms (versioned-uri)
      (alist :bindings `((,versioned-uri (generate-versioned-link ,uri)))
	     :link-header `((funcall delimit) (output-link-header-element ,stream ,versioned-uri :stylesheet))
	     :style-tags `((output-style-tag ,stream ,versioned-uri ,media ,class)))))

  (defun script-resource-forms (stream uri &rest args &key async)
    (with-gensyms (versioned-uri)
      (alist :bindings `((,versioned-uri (generate-versioned-link ,uri)))
	     :link-header `((funcall delimit) (output-link-header-element ,stream ,versioned-uri :script))
	     (if async :async-script-tags :script-tags) `((output-script-tag ,stream ,versioned-uri ,@args))))))

(defmacro with-resource-bindings ((&rest clauses) &body body)
  (let ((forms (make-hash-table :test 'eq)))
    (iter (for (resource-type . params) in clauses)
	  (iter (for (form-type . form-body) in (apply (case resource-type
							 (:preconnect #'preconnect-resource-forms)
							 (:style #'style-resource-forms)
							 (:script #'script-resource-forms))
						       'stream params))
		(appendf (gethash form-type forms) form-body)))
    `(let* ,(gethash :bindings forms)
       ,(let (w-a-f-clauses special-names lexical-names)
	     (iter (for (form-type special-name lexical-name extra-lambda-list)
			in '((:link-header *link-header* link-header-fn (delimit))
			     (:style-tags *style-tags* style-tags-fn nil)
			     (:script-tags *script-tags* script-tags-fn nil)
			     (:async-script-tags *async-script-tags* async-script-tags-fn nil)))
		   (when-let ((form-body (gethash form-type forms)))
			     (push `(,special-name ,lexical-name (stream ,@extra-lambda-list) ,@form-body) w-a-f-clauses)
			     (push special-name special-names)
			     (push lexical-name lexical-names)))
	     `(with-appended-functions ,(reverse w-a-f-clauses)
		,(when body `(declare (dynamic-extent ,@lexical-names)))
		(setf ,@(iter (for special in special-names) (for lexical in lexical-names)
			      (collect special) (collect lexical)))
		,@body)))))

(defgeneric call-with-site-resources (site fn)
  (:method ((site site) fn)
    (with-resource-bindings ((:script "/head.js")
			     (:script "/script.js" :async t))
      (call-with-fonts-source-resources (site-fonts-source site) fn))))

(defgeneric site-resources (site)
  (:method-combination append :most-specific-first)
  (:method append ((s site))
    (labels ((gen-inner (theme os &optional dark-preference)
	       (with-resource-bindings ((:style (format nil "/css/style~@[-~A~].~A.css" theme os)
						(if dark-preference "(prefers-color-scheme: dark)")
						"theme"))))
	     (gen-theme (theme os)
	       (if theme
		   (gen-inner theme os)
		   (progn (gen-inner nil os)
			  (gen-inner "dark" os t)))))
      (let* ((ua (hunchentoot:header-in* :user-agent))
	     (theme (or (and *preview* (nonempty-string (hunchentoot:get-parameter "theme")))
			(nonempty-string (hunchentoot:cookie-in "theme"))))
	     (os (cond ((search "Windows" ua) "windows")
		       ((search "Mac OS" ua) "mac")
		       (t "linux"))))
	(handler-case (gen-theme theme os)
	  (serious-condition () (gen-theme nil os)))
	*html-global-resources*))))

(sb-ext:defglobal *static-assets* nil)

(let ((new-static-assets (make-hash-table :test 'equal)))
  (flet ((defres (uri content-type)
	   (vector (concatenate 'string "www" uri) content-type)))
    (loop for system in '("mac" "windows" "linux") nconc
	 (loop for theme in '(nil "dark" "grey" "ultramodern" "zero" "brutalist" "rts" "classic" "less")
	    do (let ((uri (format nil "/css/style~@[-~A~].~A.css" theme system)))
		 (setf (gethash uri new-static-assets) (defres uri "text/css")))))
    (loop for (uri content-type) in
	 '(("/fonts.css" "text/css")
	   ("/arbital.css" "text/css")
	   ("/head.js" "text/javascript")
	   ("/script.js" "text/javascript")
	   ("/assets/favicon.ico" "image/x-icon")
	   ("/assets/telegraph.jpg" "image/jpeg")
	   ("/assets/popup.svg" "image/svg+xml"))
       do (setf (gethash uri new-static-assets) (defres uri content-type))))
  (setf *static-assets* new-static-assets))

(hunchentoot:define-easy-handler
    (view-versioned-resource
     :uri (lambda (r)
	    (when-let ((asset-data (gethash (hunchentoot:script-name r) *static-assets*)))
	      (let ((file (svref asset-data 0))
		    (content-type (svref asset-data 1)))
		(when (assoc "v" (hunchentoot:get-parameters r) :test #'string=)
		  (setf (hunchentoot:header-out "Cache-Control") (format nil "public, max-age=~A, immutable" (- (expt 2 31) 1))))
		(hunchentoot:handle-static-file file content-type))
	      t)))
    nil)
